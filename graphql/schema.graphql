"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {

    user(id: ID! @eq): User @find

    "List multiple users." 
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)



    tag(slug: String! @eq): Tag @find

    tags: [Tag!]! @all


    jobs(
      orderBy: _ @orderBy(columns: ["pinned","created_at", "job_title"])
      hasTags: _ @whereHasConditions(columns: ["slug"])

    ): [Job!]! @all

    me: User @auth
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
    jobs(
      orderBy: _ @orderBy(columns: ["pinned", "created_at"])
      ): [Job!]! @hasMany
}

type Tag {
  
  id: ID!
  title: String!
  slug: String!
}

type Job {
  
  id: ID!
  job_title: String!
  job_location: String!
  job_link: String!
  company_name: String!
  company_logo: String!
  highlighted: Boolean!
  pinned: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
  tags: [Tag!]! @belongsToMany
  user: User! @belongsTo
}

input CreateUserInput{
  name: String @rules(apply: ["required"])
  email: String @rules(apply: ["required", "email"])
  password: String @rules(apply: ["required", "min:6"]) @hash
}

input CreateUserBelongsTo {
  create: CreateUserInput
}

input CreateTagsBelongsToMany {
  connect: [ID!] @rulesForArray(apply: ["required"])
}

input CreateJobInput {
    job_title: String @rules(apply: ["required"])
    job_location: String @rules(apply: ["required"])
    job_link: String @rules(apply: ["required", "url"])
    company_name: String @rules(apply: ["required"])
    company_logo: String @rules(apply: ["required", "url"])
    highlighted: Boolean @rules(apply: ["boolean"])
    pinned: Boolean @rules(apply: ["boolean"])
    user: CreateUserBelongsTo
    tags: CreateTagsBelongsToMany!
}

type Mutation {
  createJobAndRegisterUser(input: CreateJobInput! @spread): Job! @create
  createJob(input: CreateJobInput! @spread): Job!
    @guard
    @create
    @inject(context: "user.id", name: "user_id")
}
